{"uuid":"d2517ab5-b8f2-4ecb-87dc-45dfad1fd9dc","historyId":"d60a8cf30e849a7a0a569d64717d71e6","fullName":"io.cucumber.testng.AbstractTestNGCucumberTests.runScenario","labels":[{"name":"package","value":"runnerPackage.Runnerclass"},{"name":"testClass","value":"runnerPackage.Runnerclass"},{"name":"testMethod","value":"runScenario"},{"name":"parentSuite","value":"Default suite"},{"name":"suite","value":"Default test"},{"name":"subSuite","value":"runnerPackage.Runnerclass"},{"name":"host","value":"DESKTOP-E2M6GF9"},{"name":"thread","value":"11976@DESKTOP-E2M6GF9.main(1)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"}],"links":[],"name":"Runs Cucumber Scenarios","status":"broken","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"The step 'user logs in with username \"nikhil.pachipala@optimworks.com\" and password \"12345678\"' and 6 other step(s) are undefined.\nYou can implement these steps using the snippet(s) below:\n\n@When(\"user logs in with username {string} and password {string}\")\npublic void user_logs_in_with_username_and_password(String string, String string2) {\n    // Write code here that turns the phrase above into concrete actions\n    throw new io.cucumber.java.PendingException();\n}\n@Then(\"verify that the application navigates to the dashboard\")\npublic void verify_that_the_application_navigates_to_the_dashboard() {\n    // Write code here that turns the phrase above into concrete actions\n    throw new io.cucumber.java.PendingException();\n}\n@When(\"click to add the employee details with switch case operation\")\npublic void click_to_add_the_employee_details_with_switch_case_operation(io.cucumber.datatable.DataTable dataTable) {\n    // Write code here that turns the phrase above into concrete actions\n    // For automatic transformation, change DataTable to one of\n    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or\n    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,\n    // Double, Byte, Short, Long, BigInteger or BigDecimal.\n    //\n    // For other transformations you can register a DataTableType.\n    throw new io.cucumber.java.PendingException();\n}\n@Then(\"verify the user can search with the employeeid for edit\")\npublic void verify_the_user_can_search_with_the_employeeid_for_edit(io.cucumber.datatable.DataTable dataTable) {\n    // Write code here that turns the phrase above into concrete actions\n    // For automatic transformation, change DataTable to one of\n    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or\n    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,\n    // Double, Byte, Short, Long, BigInteger or BigDecimal.\n    //\n    // For other transformations you can register a DataTableType.\n    throw new io.cucumber.java.PendingException();\n}\n@Then(\"employee edit their name with the newName {string} and dob as {string}\")\npublic void employee_edit_their_name_with_the_new_name_and_dob_as(String string, String string2) {\n    // Write code here that turns the phrase above into concrete actions\n    throw new io.cucumber.java.PendingException();\n}\n@Then(\"verify the user can search with the employeeid for delete\")\npublic void verify_the_user_can_search_with_the_employeeid_for_delete(io.cucumber.datatable.DataTable dataTable) {\n    // Write code here that turns the phrase above into concrete actions\n    // For automatic transformation, change DataTable to one of\n    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or\n    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,\n    // Double, Byte, Short, Long, BigInteger or BigDecimal.\n    //\n    // For other transformations you can register a DataTableType.\n    throw new io.cucumber.java.PendingException();\n}\n@When(\"user can click on delete button by the filtered employeeId\")\npublic void user_can_click_on_delete_button_by_the_filtered_employee_id() {\n    // Write code here that turns the phrase above into concrete actions\n    throw new io.cucumber.java.PendingException();\n}\n","trace":"io.cucumber.testng.UndefinedStepException: The step 'user logs in with username \"nikhil.pachipala@optimworks.com\" and password \"12345678\"' and 6 other step(s) are undefined.\nYou can implement these steps using the snippet(s) below:\n\n@When(\"user logs in with username {string} and password {string}\")\npublic void user_logs_in_with_username_and_password(String string, String string2) {\n    // Write code here that turns the phrase above into concrete actions\n    throw new io.cucumber.java.PendingException();\n}\n@Then(\"verify that the application navigates to the dashboard\")\npublic void verify_that_the_application_navigates_to_the_dashboard() {\n    // Write code here that turns the phrase above into concrete actions\n    throw new io.cucumber.java.PendingException();\n}\n@When(\"click to add the employee details with switch case operation\")\npublic void click_to_add_the_employee_details_with_switch_case_operation(io.cucumber.datatable.DataTable dataTable) {\n    // Write code here that turns the phrase above into concrete actions\n    // For automatic transformation, change DataTable to one of\n    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or\n    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,\n    // Double, Byte, Short, Long, BigInteger or BigDecimal.\n    //\n    // For other transformations you can register a DataTableType.\n    throw new io.cucumber.java.PendingException();\n}\n@Then(\"verify the user can search with the employeeid for edit\")\npublic void verify_the_user_can_search_with_the_employeeid_for_edit(io.cucumber.datatable.DataTable dataTable) {\n    // Write code here that turns the phrase above into concrete actions\n    // For automatic transformation, change DataTable to one of\n    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or\n    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,\n    // Double, Byte, Short, Long, BigInteger or BigDecimal.\n    //\n    // For other transformations you can register a DataTableType.\n    throw new io.cucumber.java.PendingException();\n}\n@Then(\"employee edit their name with the newName {string} and dob as {string}\")\npublic void employee_edit_their_name_with_the_new_name_and_dob_as(String string, String string2) {\n    // Write code here that turns the phrase above into concrete actions\n    throw new io.cucumber.java.PendingException();\n}\n@Then(\"verify the user can search with the employeeid for delete\")\npublic void verify_the_user_can_search_with_the_employeeid_for_delete(io.cucumber.datatable.DataTable dataTable) {\n    // Write code here that turns the phrase above into concrete actions\n    // For automatic transformation, change DataTable to one of\n    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or\n    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,\n    // Double, Byte, Short, Long, BigInteger or BigDecimal.\n    //\n    // For other transformations you can register a DataTableType.\n    throw new io.cucumber.java.PendingException();\n}\n@When(\"user can click on delete button by the filtered employeeId\")\npublic void user_can_click_on_delete_button_by_the_filtered_employee_id() {\n    // Write code here that turns the phrase above into concrete actions\n    throw new io.cucumber.java.PendingException();\n}\n\r\n\tat io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)\r\n\tat io.cucumber.testng.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:23)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$1(TestNGCucumberRunner.java:136)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)\r\n\tat io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:132)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:35)\r\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n\tat org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)\r\n\tat org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)\r\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)\r\n\tat org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)\r\n\tat org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)\r\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)\r\n\tat org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)\r\n\tat org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1597)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:829)\r\n\tat org.testng.TestRunner.run(TestRunner.java:602)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:437)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:330)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1176)\r\n\tat org.testng.TestNG.runSuites(TestNG.java:1099)\r\n\tat org.testng.TestNG.run(TestNG.java:1067)\r\n\tat org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)\r\n\tat org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)\r\n\tat org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)\r\n"},"stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"arg1","value":"\"AddEmployee functionality\""},{"name":"arg0","value":"\"Adding valid Employee details\""}],"start":1734688338508,"stop":1734688338633}